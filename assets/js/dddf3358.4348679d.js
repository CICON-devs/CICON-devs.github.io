"use strict";(self.webpackChunkcicon_docs=self.webpackChunkcicon_docs||[]).push([[592],{7578:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=t(4848),i=t(8453);const r={sidebar_position:3},c="Stripe Test Environment",o={id:"api-routes/stripe",title:"Stripe Test Environment",description:"Overview",source:"@site/docs/api-routes/stripe.md",sourceDirName:"api-routes",slug:"/api-routes/stripe",permalink:"/api-routes/stripe",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Prisma Routes for DB connection",permalink:"/api-routes/prisma-routes"},next:{title:"Cobbler Stripe Onboarding (Live)",permalink:"/api-routes/stripe-onboarding"}},a={},l=[{value:"Overview",id:"overview",level:2},{value:"Routes",id:"routes",level:3},{value:"1. <code>amend-payment-intent/route.ts</code>",id:"1-amend-payment-intentroutets",level:4},{value:"<strong>POST <code>/api/stripe/amend-payment-intent</code></strong>",id:"post-apistripeamend-payment-intent",level:5},{value:"2. <code>create-account/route.ts</code>",id:"2-create-accountroutets",level:4},{value:"<strong>POST <code>/api/stripe/create-account</code></strong>",id:"post-apistripecreate-account",level:5},{value:"3. <code>create-account-link/route.ts</code>",id:"3-create-account-linkroutets",level:4},{value:"<strong>POST <code>/api/stripe/create-account-link</code></strong>",id:"post-apistripecreate-account-link",level:5},{value:"4. <code>get-payment-intent-details/[paymentIntentId]/route.ts</code>",id:"4-get-payment-intent-detailspaymentintentidroutets",level:4},{value:"<strong>GET <code>/api/stripe/get-payment-intent-details/[paymentIntentId]</code></strong>",id:"get-apistripeget-payment-intent-detailspaymentintentid",level:5},{value:"5. <code>payment-intent/route.ts</code>",id:"5-payment-intentroutets",level:4},{value:"<strong>POST <code>/api/stripe/payment-intent</code></strong>",id:"post-apistripepayment-intent",level:5},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"stripe-test-environment",children:"Stripe Test Environment"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"api/stripe"})," folder contains API routes for handling payments, onboarding, and account management using the Stripe API. These routes manage various aspects such as payment intent creation, amending payment intents, creating Stripe accounts, and generating onboarding links for connected accounts. This uses the test environment."]}),"\n",(0,s.jsx)(n.h3,{id:"routes",children:"Routes"}),"\n",(0,s.jsxs)(n.h4,{id:"1-amend-payment-intentroutets",children:["1. ",(0,s.jsx)(n.code,{children:"amend-payment-intent/route.ts"})]}),"\n",(0,s.jsx)(n.p,{children:"This route is used to amend the price of a repair job based on the cobbler's assessment. It handles scenarios where the cobbler either agrees or disagrees with the price, or if the repair is not possible. Depending on the cobbler's response, the route captures payments, creates new PaymentIntents, or cancels them."}),"\n",(0,s.jsx)(n.h5,{id:"post-apistripeamend-payment-intent",children:(0,s.jsxs)(n.strong,{children:["POST ",(0,s.jsx)(n.code,{children:"/api/stripe/amend-payment-intent"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Amends or cancels a PaymentIntent based on cobbler feedback."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cobblerId"}),": The Stripe account ID of the cobbler."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"paymentIntentId"}),": The ID of the existing PaymentIntent."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"orderId"}),": The ID of the associated order."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isRepairable"}),": Boolean indicating if the repair is possible."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agreeWithPrice"}),": Boolean indicating if the cobbler agrees with the original price."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"newPrice"}),": New price (if applicable)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"reason"}),": Reason for the price amendment or cancellation."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Steps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If the repair is possible and the cobbler agrees with the price, the payment is captured."}),"\n",(0,s.jsx)(n.li,{children:"If the repair is possible but the cobbler disagrees with the price, the existing PaymentIntent is canceled and a new one is created with the updated price."}),"\n",(0,s.jsx)(n.li,{children:"If the repair is not possible, the PaymentIntent is updated and canceled."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns the captured PaymentIntent or the new PaymentIntent's client secret."}),"\n",(0,s.jsx)(n.li,{children:"If the repair is not possible, the PaymentIntent is canceled and the client is informed."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "paymentIntent": { /* captured PaymentIntent details */ }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"2-create-accountroutets",children:["2. ",(0,s.jsx)(n.code,{children:"create-account/route.ts"})]}),"\n",(0,s.jsx)(n.p,{children:"This route creates a new connected account in Stripe for cobblers, using the Express account type. The account is created with a default business profile for shoe repair services."}),"\n",(0,s.jsx)(n.h5,{id:"post-apistripecreate-account",children:(0,s.jsxs)(n.strong,{children:["POST ",(0,s.jsx)(n.code,{children:"/api/stripe/create-account"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Creates a new Stripe Express account for a cobbler."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Steps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Creates a new Stripe account with the country set to "GB" and business type as "individual".'}),"\n",(0,s.jsx)(n.li,{children:'Sets the Merchant Category Code (MCC) to "5611" for shoe repair services.'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns the account ID of the newly created Stripe account."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "accountId": "acct_123456789"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"3-create-account-linkroutets",children:["3. ",(0,s.jsx)(n.code,{children:"create-account-link/route.ts"})]}),"\n",(0,s.jsx)(n.p,{children:"This route generates an onboarding link for a Stripe connected account. The generated link directs cobblers to the Stripe onboarding flow, allowing them to complete the necessary account setup."}),"\n",(0,s.jsx)(n.h5,{id:"post-apistripecreate-account-link",children:(0,s.jsxs)(n.strong,{children:["POST ",(0,s.jsx)(n.code,{children:"/api/stripe/create-account-link"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Generates an account onboarding link for a connected Stripe account."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"accountId"}),": The ID of the connected Stripe account."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Steps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Constructs the base URL dynamically from the request headers."}),"\n",(0,s.jsx)(n.li,{children:"Generates an account onboarding link with refresh and return URLs."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns the account onboarding link URL."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "url": "https://connect.stripe.com/setup/s/abc123"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"4-get-payment-intent-detailspaymentintentidroutets",children:["4. ",(0,s.jsx)(n.code,{children:"get-payment-intent-details/[paymentIntentId]/route.ts"})]}),"\n",(0,s.jsx)(n.p,{children:"This route retrieves the details of an existing PaymentIntent from Stripe. It returns information such as the amount, currency, application fee amount, and net amount."}),"\n",(0,s.jsx)(n.h5,{id:"get-apistripeget-payment-intent-detailspaymentintentid",children:(0,s.jsxs)(n.strong,{children:["GET ",(0,s.jsx)(n.code,{children:"/api/stripe/get-payment-intent-details/[paymentIntentId]"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Retrieves the details of a PaymentIntent from Stripe."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Steps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Retrieves the PaymentIntent using its ID."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns the full details of the PaymentIntent."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": "pi_1Jgq2e2eZvKYlo2C",\n  "amount": 5000,\n  "currency": "gbp",\n  "application_fee_amount": 500,\n  "net_amount": 4500,\n  // Other PaymentIntent details\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"5-payment-intentroutets",children:["5. ",(0,s.jsx)(n.code,{children:"payment-intent/route.ts"})]}),"\n",(0,s.jsx)(n.p,{children:"This route creates a PaymentIntent with a split payment between the platform and a connected cobbler account. The platform takes a 10% fee, and the remaining amount is transferred to the cobbler\u2019s Stripe account."}),"\n",(0,s.jsx)(n.h5,{id:"post-apistripepayment-intent",children:(0,s.jsxs)(n.strong,{children:["POST ",(0,s.jsx)(n.code,{children:"/api/stripe/payment-intent"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Creates a PaymentIntent with a split payment between the platform and a connected Stripe account."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"amount"}),": The total amount to be charged (in pence)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"connectedAccountId"}),": The Stripe account ID of the cobbler."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Steps"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Splits the payment, with 10% going to the platform and 90% to the cobbler's connected Stripe account."}),"\n",(0,s.jsx)(n.li,{children:"Creates the PaymentIntent with manual capture enabled."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns the client secret for the created PaymentIntent."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "clientSecret": "pi_1Jgq2e2eZvKYlo2C_secret_WBt6dYH6fhg7mJ"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"These routes facilitate key payment and account management operations within the app, allowing cobblers to manage their Stripe accounts, capture payments, and process split payments. The Stripe API integration is crucial for handling cobbler payouts and managing the overall payment flow within the app."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);